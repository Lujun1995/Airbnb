{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Airbnb Project\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Questions\n",
    "1. Are disributions of price in Seattle and Boston different? \n",
    "2. What's the difference in price between different property type? \n",
    "3. Can we use selected variable to predict the price?"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Load packages"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 61,
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "import pandas as pd \n",
    "import matplotlib.pyplot as plt\n",
    "import seaborn as sns\n",
    "%matplotlib inline"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Read in the data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 62,
   "metadata": {},
   "outputs": [],
   "source": [
    "Boston_listing = pd.read_csv(\"./data/boston/listings.csv\", na_values = \"N/A\")\n",
    "Seattle_listing = pd.read_csv(\"./data/seattle/listings.csv\", na_values = \"N/A\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 63,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(3585, 95)"
      ]
     },
     "execution_count": 63,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "Boston_listing.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 64,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(3818, 92)"
      ]
     },
     "execution_count": 64,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "Seattle_listing.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 65,
   "metadata": {},
   "outputs": [],
   "source": [
    "Boston_listing[\"city\"] = \"Boston\"\n",
    "Seattle_listing[\"city\"] = \"Seattle\""
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Merge two datasets"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 66,
   "metadata": {},
   "outputs": [],
   "source": [
    "data = pd.concat([Boston_listing, Seattle_listing], join=\"inner\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 67,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(7403, 92)"
      ]
     },
     "execution_count": 67,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data.shape"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Select variables of interest"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 68,
   "metadata": {},
   "outputs": [],
   "source": [
    "interest_vars = [\"host_location\", \"host_response_time\", \"host_response_rate\", \"host_acceptance_rate\", \n",
    "                \"host_listings_count\", \"property_type\", \"room_type\", \"accommodates\", \"bathrooms\",\n",
    "                \"bedrooms\", \"beds\", \"bed_type\", \"square_feet\", \"price\", \"weekly_price\", \"monthly_price\", \n",
    "                 \"security_deposit\", \"cleaning_fee\", \"guests_included\", \"extra_people\", \"cancellation_policy\",\n",
    "                \"review_scores_rating\", \"city\"]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 69,
   "metadata": {},
   "outputs": [],
   "source": [
    "data_select = data[interest_vars]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Drop variables contained too many NA"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 70,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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423c7/fpdrsNTwXtdrvxvpOapO5J9Xq9hZ5/Uex7udj35JoG+aPA/Zn5TSAjogecBfzP8TZutVoLDeNJLPqHSNX3bRL2vVzse2OdTmekYzV9auVTwKURsS0ivgc4lfVwlyTNWaMgz8yPAfcB9wJ/C1ydmUemWZgkaTSNHz/MzH3TLESS1IwTgiSpOINckoozyCWpOINckoozyCWpOINckoozyCWpOINckoozyCWpOINckoozyCWpOINckoozyCWpOINckoozyCWpOINckoozyCWpOINckoozyCWpOINckoozyCWpuO2T7BwR3wF0gBdn5v3TKUmSNI7GI/KI2AH8KXBoeuVIksY1ya2VdwLvB/5rSrVIkhpoFOQR8Rrgkcy8a7rlSJLGtW1tbW3snSLik8Da4M+5wAPAyzPzS8fbfv/+/WutVqtxke12m13X3NF4/6YOXH8Z3W537ud9Wq/XY2VlZWHnXxT7Xi72vbGDBw92VldXz9vsWI1+2ZmZFz/9OiLuBn5loxAHaLVatNvtJqdauEXW3e12y75vk7Dv5WLfG+t0OiMdy8cPJam4iR4/BMjMPVOoQ5LUkCNySSrOIJek4gxySSrOIJek4gxySSrOIJek4gxySSrOIJek4gxySSrOIJek4gzyIXqHjyzluSXVMvFnrZzIVnacvJCPz4X1j9CVpFE4Ipek4gxySSrOIJek4gxySSrOIJek4gxySSrOIJek4gxySSrOIJek4gxySSqu0RT9iNgB3ALsAlrAdZl5+xTrkiSNqOmI/FXAo5l5EbAX+OPplSRJGkfTD836G+DDRy0/OYVaJEkNNAryzHwcICJ2sh7obxu2fb/fp9vtNjkVAO12u/G+VfUOH1lI308c6vPwgS/M/bxH6/V6E32/VPHsXedw6jNa/788z+u9Fa7z05bleh9rmn03/hjbiDgbuA24KTP/ati2rVZrKcN4Eov6CN0D11+28GvV7XYXXsO8LPJjkrfKe7xM1/too/Td6XRGOlbTX3Z+J/D3wOsy8x+bHEOSNB1NR+RvAb4NeHtEvH2wbm9mHppOWZKkUTW9R/564PVTrkWS1IATgiSpOINckoozyCWpOINckoozyCWpOINckoozyCWpOINckoozyCWpOINckoozyLX0eoePLLoEzcGirvM8ztv4Y2ylE8UiPzJY83MiX2dH5JJUnEEuScUZ5JJUnEEuScUZ5JJUnEEuScUZ5JJUnEEuScUZ5JJUnEEuScU1mqIfEScBNwE/CvSBX8rMB6dZmCRpNE1H5K8AVjLzhcA1wLumV5IkaRxNg/zHgI8DZOZngfOmVpEkaSzb1tbWxt4pIm4Gbs3MOwfLDwPnZOaTx9u+0+k8AnxxkkIlaQk9Z3V19azNNmr6Mbb/C+w8avmkjUIcYJRCJEnNNL218mngZQARsRv43NQqkiSNpemI/DbgxRHxz8A24BemV5IkaRyN7pFLkrYOJwRJUnEGuSQVt2X+8+XNZotGxGuBq4Angesy82MLKXTKRuj7jcArB4t/l5nvmH+V0zfK7ODBNncAH83M98+/ytkY4ZrvBX5nsPivwNWZWf4e6Ah9/ybws8BTwO9n5m0LKXRGIuJ84IbM3HPM+p8Afpv1bLslMz8w7rG30oh8w9miEfFdwK8DFwIvBf4gIloLqXL6hvV9DvBzwAXAC4GXRMSPLKTK6RtldvB1wBlzrWo+hl3zncAfApdn5m7gAHDmIoqcgWF9P4v1v+MvBF4CvHchFc5IROwDbgZWjlm/A3gP6z1fAvzyIO/GspWCfNhs0RcAn87MfmZ+HXgQOFECbVjf/wFcmplHMvMpYAfQm3+JMzF0dnBE/BTrI7M751/azA3r/QLWH+d9V0TcA3w5Mx+Zf4kzMazvJ1ifNHjq4M9Tc69uth4CrjjO+jbwYGY+lpnfBD4FXDTuwbdSkJ8GfP2o5SMRsX2Dr30DOH1ehc3Yhn1n5uHM/EpEbIuIdwL3ZeYDC6ly+jbsOyKeD1zJ+j83T0TDvtfPBH4ceDOwF3hDRHz/nOublWF9w/rA5d9Zv5104zwLm7XMvBU4fJwvTSXbtlKQD5steuzXdgJfm1dhMzZ0lmxErAB/OdjmV+dc2ywN6/vVwPcCnwBeA7wpIi6db3kzNaz3R4F/ycwvZebjwCeBc+dd4IwM63sv8N3Ac4FnA6+IiBfMub5FmEq2baUgHzZb9F7goohYiYjTWf/nyOfnX+JMbNh3RGwDPgr8W2ZelZlHFlPiTGzYd2buy8zzB78U+iDw7sz8+CKKnJFh3+sd4PkRceZgtLqb9VHqiWBY348Bh4B+ZvZYD7Nnzb3C+esCz4uIMyLiFOBi4DPjHmTLPLXCcWaLRsSbWL9/dHtE3Ajcw/oPn7cOLvaJYMO+gZNZ/wVIa/AkA8C1mTn2hd6Chl7vxZY2c5t9r18L3DXY9q8z80QZtGzW94uAz0bEU6zfK/6HBdY6UxFxJfDMzPyzwXtwF+vZdktm/ue4x3NmpyQVt5VurUiSGjDIJak4g1ySijPIJak4g1ySijPIJak4g1ySijPIJam4/wN3n3fapHJ74QAAAABJRU5ErkJggg==\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "null_num = data_select.isnull().mean()\n",
    "null_num.hist();"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 71,
   "metadata": {},
   "outputs": [],
   "source": [
    "drop_list = null_num[null_num >= 0.2]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 72,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "['square_feet',\n",
       " 'weekly_price',\n",
       " 'monthly_price',\n",
       " 'security_deposit',\n",
       " 'cleaning_fee']"
      ]
     },
     "execution_count": 72,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "drop_list.index.tolist()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 73,
   "metadata": {},
   "outputs": [],
   "source": [
    "data_select = data_select.drop(drop_list.index, axis=1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 74,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Index(['host_location', 'host_response_time', 'host_response_rate',\n",
       "       'host_acceptance_rate', 'host_listings_count', 'property_type',\n",
       "       'room_type', 'accommodates', 'bathrooms', 'bedrooms', 'beds',\n",
       "       'bed_type', 'price', 'guests_included', 'extra_people',\n",
       "       'cancellation_policy', 'review_scores_rating', 'city'],\n",
       "      dtype='object')"
      ]
     },
     "execution_count": 74,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data_select.columns"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 75,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(7403, 18)"
      ]
     },
     "execution_count": 75,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data_select.shape"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Clean the data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 76,
   "metadata": {},
   "outputs": [],
   "source": [
    "data_select.price.replace(regex=True,inplace=True,to_replace=r'\\D',value=r'')\n",
    "data_select.price = data_select.price.apply(pd.to_numeric) / 100\n",
    "\n",
    "data_select.extra_people.replace(regex=True,inplace=True,to_replace=r'\\D',value=r'')\n",
    "data_select.extra_people = data_select.extra_people.apply(pd.to_numeric) / 100\n",
    "\n",
    "data_select.host_response_rate.replace(regex=True,inplace=True,to_replace=r'\\D',value=r'')\n",
    "data_select.host_response_rate = data_select.host_response_rate.apply(pd.to_numeric)\n",
    "\n",
    "data_select.host_acceptance_rate.replace(regex=True,inplace=True,to_replace=r'\\D',value=r'')\n",
    "data_select.host_acceptance_rate = data_select.host_acceptance_rate.apply(pd.to_numeric)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Q1\n",
    "### Are disributions of price in Seattle and Boston different?"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 77,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "data_select.price.hist(by = data_select[\"city\"]);"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 78,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x216 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "g = sns.FacetGrid(data_select, col=\"city\", hue=\"city\", palette=\"Set1\", col_wrap=2)\n",
    "bins=np.linspace(data_select.price.min(), data_select.price.max(), 30)\n",
    "g.map(plt.hist, 'price', bins=bins, ec=\"k\");"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 79,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/anaconda3/lib/python3.7/site-packages/scipy/stats/stats.py:1713: FutureWarning: Using a non-tuple sequence for multidimensional indexing is deprecated; use `arr[tuple(seq)]` instead of `arr[seq]`. In the future this will be interpreted as an array index, `arr[np.array(seq)]`, which will result either in an error or a different result.\n",
      "  return np.add.reduce(sorted[indexer] * weights, axis=axis) / sumval\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1000x300 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "fig, axes = plt.subplots(1, 2, figsize=(10, 3), sharey=True, dpi=100)\n",
    "x1 = data_select.loc[data_select.city=='Boston', ['price']]\n",
    "x2 = data_select.loc[data_select.city=='Seattle', ['price']]\n",
    "bins=np.linspace(data_select.price.min(), data_select.price.max(), 100)\n",
    "sns.distplot(x1 , color=\"dodgerblue\", ax=axes[0],bins = bins, axlabel='Boston')\n",
    "axes[0].set_xlim([0, 1500]);\n",
    "sns.distplot(x2 , color=\"deeppink\", ax=axes[1],bins = bins, axlabel='Seattle')\n",
    "axes[1].set_xlim([0, 1500]);\n",
    "for tick in axes[0].get_xticklabels():\n",
    "    tick.set_rotation(30)\n",
    "for tick in axes[1].get_xticklabels():\n",
    "    tick.set_rotation(30)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 80,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "sns.set_style(\"whitegrid\")\n",
    "my_pal = {\"Boston\": \"dodgerblue\", \"Seattle\": \"deeppink\"}\n",
    "ax = sns.boxplot(x=\"city\", y=\"price\", data=data_select, palette=my_pal, width=0.3)\n",
    "ax.set_ylim([0, 500]);"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 81,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/anaconda3/lib/python3.7/site-packages/pandas/core/groupby/groupby.py:4656: FutureWarning: using a dict with renaming is deprecated and will be removed in a future version\n",
      "  return super(DataFrameGroupBy, self).aggregate(arg, *args, **kwargs)\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead tr th {\n",
       "        text-align: left;\n",
       "    }\n",
       "\n",
       "    .dataframe thead tr:last-of-type th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr>\n",
       "      <th></th>\n",
       "      <th colspan=\"5\" halign=\"left\">price</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th></th>\n",
       "      <th>N</th>\n",
       "      <th>min</th>\n",
       "      <th>max</th>\n",
       "      <th>mean</th>\n",
       "      <th>median</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>city</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>Boston</th>\n",
       "      <td>3585</td>\n",
       "      <td>10.0</td>\n",
       "      <td>4000.0</td>\n",
       "      <td>173.93</td>\n",
       "      <td>150.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Seattle</th>\n",
       "      <td>3818</td>\n",
       "      <td>20.0</td>\n",
       "      <td>1000.0</td>\n",
       "      <td>127.98</td>\n",
       "      <td>100.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "        price                             \n",
       "            N   min     max    mean median\n",
       "city                                      \n",
       "Boston   3585  10.0  4000.0  173.93  150.0\n",
       "Seattle  3818  20.0  1000.0  127.98  100.0"
      ]
     },
     "execution_count": 81,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "aggregation = {\"price\":{\"N\": \"count\",\n",
    "                        \"min\": \"min\",\n",
    "                        \"max\": \"max\",\n",
    "                       \"mean\": \"mean\",\n",
    "                       \"median\": \"median\"}\n",
    "              }\n",
    "\n",
    "table = pd.DataFrame(data_select.groupby(\"city\").agg(aggregation)).round(2)\n",
    "table"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "* The distributions of price of AirBNB in Seattle and Bostion are different. \n",
    "* Althogh they are both right-skewd which means there are some AirBNB homes much larger than the bulk of the homes (some large value greater than 300 dollars), the distribution of price in Seattle is more right-skewed.\n",
    "\n",
    "* The mean of price of AirBNB homes in Boston is much higher than that in Seattle. Compared to Seattle, there are more homes with price higher than $200 in Boston."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Q2\n",
    "### What's the difference in price between different property type?"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 82,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead tr th {\n",
       "        text-align: left;\n",
       "    }\n",
       "\n",
       "    .dataframe thead tr:last-of-type th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th colspan=\"5\" halign=\"left\">price</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th>N</th>\n",
       "      <th>min</th>\n",
       "      <th>max</th>\n",
       "      <th>mean</th>\n",
       "      <th>median</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>city</th>\n",
       "      <th>property_type</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th rowspan=\"13\" valign=\"top\">Boston</th>\n",
       "      <th>Apartment</th>\n",
       "      <td>2612</td>\n",
       "      <td>10.0</td>\n",
       "      <td>4000.0</td>\n",
       "      <td>181.97</td>\n",
       "      <td>159.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Bed &amp; Breakfast</th>\n",
       "      <td>41</td>\n",
       "      <td>44.0</td>\n",
       "      <td>350.0</td>\n",
       "      <td>129.37</td>\n",
       "      <td>100.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Boat</th>\n",
       "      <td>12</td>\n",
       "      <td>175.0</td>\n",
       "      <td>425.0</td>\n",
       "      <td>268.83</td>\n",
       "      <td>262.5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Camper/RV</th>\n",
       "      <td>1</td>\n",
       "      <td>60.0</td>\n",
       "      <td>60.0</td>\n",
       "      <td>60.00</td>\n",
       "      <td>60.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Condominium</th>\n",
       "      <td>231</td>\n",
       "      <td>30.0</td>\n",
       "      <td>700.0</td>\n",
       "      <td>190.25</td>\n",
       "      <td>160.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Dorm</th>\n",
       "      <td>2</td>\n",
       "      <td>50.0</td>\n",
       "      <td>75.0</td>\n",
       "      <td>62.50</td>\n",
       "      <td>62.5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Entire Floor</th>\n",
       "      <td>4</td>\n",
       "      <td>80.0</td>\n",
       "      <td>155.0</td>\n",
       "      <td>122.00</td>\n",
       "      <td>126.5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Guesthouse</th>\n",
       "      <td>1</td>\n",
       "      <td>289.0</td>\n",
       "      <td>289.0</td>\n",
       "      <td>289.00</td>\n",
       "      <td>289.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>House</th>\n",
       "      <td>562</td>\n",
       "      <td>20.0</td>\n",
       "      <td>1300.0</td>\n",
       "      <td>131.60</td>\n",
       "      <td>84.5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Loft</th>\n",
       "      <td>39</td>\n",
       "      <td>30.0</td>\n",
       "      <td>500.0</td>\n",
       "      <td>185.41</td>\n",
       "      <td>166.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Other</th>\n",
       "      <td>17</td>\n",
       "      <td>40.0</td>\n",
       "      <td>500.0</td>\n",
       "      <td>229.94</td>\n",
       "      <td>218.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Townhouse</th>\n",
       "      <td>54</td>\n",
       "      <td>44.0</td>\n",
       "      <td>700.0</td>\n",
       "      <td>149.04</td>\n",
       "      <td>99.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Villa</th>\n",
       "      <td>6</td>\n",
       "      <td>40.0</td>\n",
       "      <td>400.0</td>\n",
       "      <td>189.50</td>\n",
       "      <td>170.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th rowspan=\"16\" valign=\"top\">Seattle</th>\n",
       "      <th>Apartment</th>\n",
       "      <td>1708</td>\n",
       "      <td>20.0</td>\n",
       "      <td>999.0</td>\n",
       "      <td>122.93</td>\n",
       "      <td>110.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Bed &amp; Breakfast</th>\n",
       "      <td>37</td>\n",
       "      <td>30.0</td>\n",
       "      <td>299.0</td>\n",
       "      <td>112.05</td>\n",
       "      <td>99.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Boat</th>\n",
       "      <td>8</td>\n",
       "      <td>75.0</td>\n",
       "      <td>775.0</td>\n",
       "      <td>282.38</td>\n",
       "      <td>150.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Bungalow</th>\n",
       "      <td>13</td>\n",
       "      <td>65.0</td>\n",
       "      <td>349.0</td>\n",
       "      <td>115.62</td>\n",
       "      <td>95.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Cabin</th>\n",
       "      <td>21</td>\n",
       "      <td>52.0</td>\n",
       "      <td>300.0</td>\n",
       "      <td>104.67</td>\n",
       "      <td>95.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Camper/RV</th>\n",
       "      <td>13</td>\n",
       "      <td>45.0</td>\n",
       "      <td>375.0</td>\n",
       "      <td>120.46</td>\n",
       "      <td>82.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Chalet</th>\n",
       "      <td>2</td>\n",
       "      <td>62.0</td>\n",
       "      <td>135.0</td>\n",
       "      <td>98.50</td>\n",
       "      <td>98.5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Condominium</th>\n",
       "      <td>91</td>\n",
       "      <td>50.0</td>\n",
       "      <td>700.0</td>\n",
       "      <td>151.11</td>\n",
       "      <td>115.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Dorm</th>\n",
       "      <td>2</td>\n",
       "      <td>38.0</td>\n",
       "      <td>41.0</td>\n",
       "      <td>39.50</td>\n",
       "      <td>39.5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>House</th>\n",
       "      <td>1733</td>\n",
       "      <td>25.0</td>\n",
       "      <td>1000.0</td>\n",
       "      <td>132.35</td>\n",
       "      <td>95.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Loft</th>\n",
       "      <td>40</td>\n",
       "      <td>25.0</td>\n",
       "      <td>425.0</td>\n",
       "      <td>135.70</td>\n",
       "      <td>102.5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Other</th>\n",
       "      <td>22</td>\n",
       "      <td>39.0</td>\n",
       "      <td>170.0</td>\n",
       "      <td>94.68</td>\n",
       "      <td>86.5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Tent</th>\n",
       "      <td>5</td>\n",
       "      <td>25.0</td>\n",
       "      <td>65.0</td>\n",
       "      <td>54.00</td>\n",
       "      <td>65.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Townhouse</th>\n",
       "      <td>118</td>\n",
       "      <td>28.0</td>\n",
       "      <td>498.0</td>\n",
       "      <td>129.46</td>\n",
       "      <td>97.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Treehouse</th>\n",
       "      <td>3</td>\n",
       "      <td>48.0</td>\n",
       "      <td>200.0</td>\n",
       "      <td>101.00</td>\n",
       "      <td>55.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Yurt</th>\n",
       "      <td>1</td>\n",
       "      <td>100.0</td>\n",
       "      <td>100.0</td>\n",
       "      <td>100.00</td>\n",
       "      <td>100.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                        price                              \n",
       "                            N    min     max    mean median\n",
       "city    property_type                                      \n",
       "Boston  Apartment        2612   10.0  4000.0  181.97  159.0\n",
       "        Bed & Breakfast    41   44.0   350.0  129.37  100.0\n",
       "        Boat               12  175.0   425.0  268.83  262.5\n",
       "        Camper/RV           1   60.0    60.0   60.00   60.0\n",
       "        Condominium       231   30.0   700.0  190.25  160.0\n",
       "        Dorm                2   50.0    75.0   62.50   62.5\n",
       "        Entire Floor        4   80.0   155.0  122.00  126.5\n",
       "        Guesthouse          1  289.0   289.0  289.00  289.0\n",
       "        House             562   20.0  1300.0  131.60   84.5\n",
       "        Loft               39   30.0   500.0  185.41  166.0\n",
       "        Other              17   40.0   500.0  229.94  218.0\n",
       "        Townhouse          54   44.0   700.0  149.04   99.0\n",
       "        Villa               6   40.0   400.0  189.50  170.0\n",
       "Seattle Apartment        1708   20.0   999.0  122.93  110.0\n",
       "        Bed & Breakfast    37   30.0   299.0  112.05   99.0\n",
       "        Boat                8   75.0   775.0  282.38  150.0\n",
       "        Bungalow           13   65.0   349.0  115.62   95.0\n",
       "        Cabin              21   52.0   300.0  104.67   95.0\n",
       "        Camper/RV          13   45.0   375.0  120.46   82.0\n",
       "        Chalet              2   62.0   135.0   98.50   98.5\n",
       "        Condominium        91   50.0   700.0  151.11  115.0\n",
       "        Dorm                2   38.0    41.0   39.50   39.5\n",
       "        House            1733   25.0  1000.0  132.35   95.0\n",
       "        Loft               40   25.0   425.0  135.70  102.5\n",
       "        Other              22   39.0   170.0   94.68   86.5\n",
       "        Tent                5   25.0    65.0   54.00   65.0\n",
       "        Townhouse         118   28.0   498.0  129.46   97.0\n",
       "        Treehouse           3   48.0   200.0  101.00   55.0\n",
       "        Yurt                1  100.0   100.0  100.00  100.0"
      ]
     },
     "execution_count": 82,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "aggregation = {\"price\":{\"N\": \"count\",\n",
    "                        \"min\": \"min\",\n",
    "                        \"max\": \"max\",\n",
    "                       \"mean\": \"mean\",\n",
    "                       \"median\": \"median\"}\n",
    "              }\n",
    "\n",
    "pd.DataFrame(data_select.groupby([\"city\", \"property_type\"]).agg(aggregation)).round(2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 83,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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+9/XLbfcot7eXj3wwAO655579Lvf/U4XXHCBXn31Vd1xxx2SpE2bNmn//v36wQ9+oJ/97GfavHmzPve5z+nOO+8MH++EE07Qr3/9a1VXV+u+++6z7HHZco63NFD1XrcuvSf4FxUVqaGhIdlhAAAAAIApBoeaS1JfX59uvfVW3XXXXXrzzTdVWloqSTrnnHN04okn6o033tCFF16oxYsXa86cOZo9e7a++MUvRvT38ssv66yzztIpp5wiSVqwYIF+/vOfh78/uN7XGWecoc7OTssel20r3gAAAACA1JWTk6PLL79cL7zwwrDvhUIhBQIB3XjjjfqP//gPuVwu1dbWDiuu9vf3y+FwRPxcX19fuD24aNuH72MFEm8AAAAAQErasWOHioqKdMopp2jLli2SpL/+9a9699139clPflKXXXaZQqGQDMNQZWWlXn31VUlSVlaWAoGAzj77bO3atUv/+Mc/JEkbN27Ueeedl/DHYduh5gAAAACAf5o06aSYt/4adb8xGpzj7XA41N/fr2nTpumuu+7SwYMHtXz5cv37v/+7cnJy9NOf/lTjxo3TrbfeqltuuUU5OTnKy8vT8uXLJUkXXXSRLr/8cj3++OO688479a1vfUuBQEAnn3yy7r77btMf47E4QqFQKOFHNVlLS4tmzJiR7DASzu/3a+XKlaqpqUnLldkBAOmhsrJSklRXV5fUOAAA5unv79drr72mT37yk8rKykp2OCkr2nkaTR7KUPM05vV61draKq/Xm+xQAAAAAABHQeKdpvx+vxobGyVJjY2N8vv9SY4IAAAAADASEu805fV65XQO/PqcTidVbwAAAABIUSTeacrn8ykQCEiSAoGAfD5fkiMCAAAAAIyExDtNud1uZWcPLEqfnZ0d3vgdAAAAAJBaSLzTlGEYCgaDkqRgMCjDMJIcEQAAAABgJOzjnaZcLpc8Ho+2bdsmj8fDdmIAAAAA4nLT9V/Te/s7TO/3oxMn6WcP/UdM933mmWf085//XMFgUKFQSPPmzdN111036mM2NjbqzTfflGEYamlp0datW1VdXa1NmzbpxRdf1I9+9KNR9xkPEu80ZhiG2traqHYDAAAAiNt7+zu0asZu0/td2hLb/drb21VbW6tNmzbpox/9qLq6urRo0SKddtppuvDCC0d1zFdeeSX8/7///e/av3//qH7ebCTeaczl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\n",
      "text/plain": [
       "<Figure size 1200x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "fig = plt.figure(num=None, figsize=(15, 6), dpi=80, facecolor='w', edgecolor='k')\n",
    "fig = sns.boxplot(x = \"property_type\", y = \"price\", hue = \"city\", data = data_select)\n",
    "fig.set_ylim([0, 700])\n",
    "for tick in fig.get_xticklabels():\n",
    "    tick.set_rotation(30)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "* Except house, prices of other types of property in Boston are tend to be higher than those in Seattle.\n",
    "* Most AirBNB homes are apartments, Condominium in two cities.\n",
    "* Boat is most expensive property type among all property types in Seattle. Guesthouse is most expensive property type among all property types in Boston."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "##  Q3\n",
    "### Can we use selected variables to predict the price?"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 84,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "Int64Index: 7403 entries, 0 to 3817\n",
      "Data columns (total 18 columns):\n",
      "host_location           7384 non-null object\n",
      "host_response_time      6409 non-null object\n",
      "host_response_rate      6409 non-null float64\n",
      "host_acceptance_rate    6159 non-null float64\n",
      "host_listings_count     7401 non-null float64\n",
      "property_type           7399 non-null object\n",
      "room_type               7403 non-null object\n",
      "accommodates            7403 non-null int64\n",
      "bathrooms               7373 non-null float64\n",
      "bedrooms                7387 non-null float64\n",
      "beds                    7393 non-null float64\n",
      "bed_type                7403 non-null object\n",
      "price                   7403 non-null float64\n",
      "guests_included         7403 non-null int64\n",
      "extra_people            7403 non-null float64\n",
      "cancellation_policy     7403 non-null object\n",
      "review_scores_rating    5943 non-null float64\n",
      "city                    7403 non-null object\n",
      "dtypes: float64(9), int64(2), object(7)\n",
      "memory usage: 1.2+ MB\n"
     ]
    }
   ],
   "source": [
    "data_select.info()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 85,
   "metadata": {},
   "outputs": [],
   "source": [
    "## Too many locations, drop location\n",
    "data_select = data_select.drop(columns=\"host_location\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 86,
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.impute import SimpleImputer\n",
    "fill_NaN = SimpleImputer(missing_values=np.nan, strategy='most_frequent')\n",
    "imputed_DF = pd.DataFrame(fill_NaN.fit_transform(data_select))\n",
    "imputed_DF.columns = data_select.columns\n",
    "imputed_DF.index = data_select.index"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 87,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "Int64Index: 7403 entries, 0 to 3817\n",
      "Data columns (total 17 columns):\n",
      "host_response_time      7403 non-null object\n",
      "host_response_rate      7403 non-null object\n",
      "host_acceptance_rate    7403 non-null object\n",
      "host_listings_count     7403 non-null object\n",
      "property_type           7403 non-null object\n",
      "room_type               7403 non-null object\n",
      "accommodates            7403 non-null object\n",
      "bathrooms               7403 non-null object\n",
      "bedrooms                7403 non-null object\n",
      "beds                    7403 non-null object\n",
      "bed_type                7403 non-null object\n",
      "price                   7403 non-null object\n",
      "guests_included         7403 non-null object\n",
      "extra_people            7403 non-null object\n",
      "cancellation_policy     7403 non-null object\n",
      "review_scores_rating    7403 non-null object\n",
      "city                    7403 non-null object\n",
      "dtypes: object(17)\n",
      "memory usage: 1.2+ MB\n"
     ]
    }
   ],
   "source": [
    "imputed_DF.info()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 88,
   "metadata": {},
   "outputs": [],
   "source": [
    "imputed_DF.price = np.log(imputed_DF[\"price\"].astype(float))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 89,
   "metadata": {},
   "outputs": [],
   "source": [
    "## change categorical variables into dummy variable\n",
    "cat = [\"host_response_time\", \"property_type\", \"room_type\", \"bed_type\", \"cancellation_policy\", \"city\"]\n",
    "df_dummy = pd.get_dummies(imputed_DF[cat])\n",
    "imputed_DF_dummy = pd.concat([imputed_DF, df_dummy], axis=1)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 90,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>host_response_time</th>\n",
       "      <th>host_response_rate</th>\n",
       "      <th>host_acceptance_rate</th>\n",
       "      <th>host_listings_count</th>\n",
       "      <th>property_type</th>\n",
       "      <th>room_type</th>\n",
       "      <th>accommodates</th>\n",
       "      <th>bathrooms</th>\n",
       "      <th>bedrooms</th>\n",
       "      <th>beds</th>\n",
       "      <th>...</th>\n",
       "      <th>bed_type_Couch</th>\n",
       "      <th>bed_type_Futon</th>\n",
       "      <th>bed_type_Pull-out Sofa</th>\n",
       "      <th>bed_type_Real Bed</th>\n",
       "      <th>cancellation_policy_flexible</th>\n",
       "      <th>cancellation_policy_moderate</th>\n",
       "      <th>cancellation_policy_strict</th>\n",
       "      <th>cancellation_policy_super_strict_30</th>\n",
       "      <th>city_Boston</th>\n",
       "      <th>city_Seattle</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>within an hour</td>\n",
       "      <td>100</td>\n",
       "      <td>100</td>\n",
       "      <td>1</td>\n",
       "      <td>House</td>\n",
       "      <td>Entire home/apt</td>\n",
       "      <td>4</td>\n",
       "      <td>1.5</td>\n",
       "      <td>2</td>\n",
       "      <td>3</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>within an hour</td>\n",
       "      <td>100</td>\n",
       "      <td>100</td>\n",
       "      <td>1</td>\n",
       "      <td>Apartment</td>\n",
       "      <td>Private room</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>within a few hours</td>\n",
       "      <td>100</td>\n",
       "      <td>88</td>\n",
       "      <td>1</td>\n",
       "      <td>Apartment</td>\n",
       "      <td>Private room</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>within a few hours</td>\n",
       "      <td>100</td>\n",
       "      <td>50</td>\n",
       "      <td>1</td>\n",
       "      <td>House</td>\n",
       "      <td>Private room</td>\n",
       "      <td>4</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>within an hour</td>\n",
       "      <td>100</td>\n",
       "      <td>100</td>\n",
       "      <td>1</td>\n",
       "      <td>House</td>\n",
       "      <td>Private room</td>\n",
       "      <td>2</td>\n",
       "      <td>1.5</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5 rows × 54 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "   host_response_time host_response_rate host_acceptance_rate  \\\n",
       "0      within an hour                100                  100   \n",
       "1      within an hour                100                  100   \n",
       "2  within a few hours                100                   88   \n",
       "3  within a few hours                100                   50   \n",
       "4      within an hour                100                  100   \n",
       "\n",
       "  host_listings_count property_type        room_type accommodates bathrooms  \\\n",
       "0                   1         House  Entire home/apt            4       1.5   \n",
       "1                   1     Apartment     Private room            2         1   \n",
       "2                   1     Apartment     Private room            2         1   \n",
       "3                   1         House     Private room            4         1   \n",
       "4                   1         House     Private room            2       1.5   \n",
       "\n",
       "  bedrooms beds      ...      bed_type_Couch  bed_type_Futon  \\\n",
       "0        2    3      ...                   0               0   \n",
       "1        1    1      ...                   0               0   \n",
       "2        1    1      ...                   0               0   \n",
       "3        1    2      ...                   0               0   \n",
       "4        1    2      ...                   0               0   \n",
       "\n",
       "  bed_type_Pull-out Sofa bed_type_Real Bed cancellation_policy_flexible  \\\n",
       "0                      0                 1                            0   \n",
       "1                      0                 1                            0   \n",
       "2                      0                 1                            0   \n",
       "3                      0                 1                            0   \n",
       "4                      0                 1                            1   \n",
       "\n",
       "  cancellation_policy_moderate cancellation_policy_strict  \\\n",
       "0                            1                          0   \n",
       "1                            1                          0   \n",
       "2                            1                          0   \n",
       "3                            1                          0   \n",
       "4                            0                          0   \n",
       "\n",
       "   cancellation_policy_super_strict_30  city_Boston  city_Seattle  \n",
       "0                                    0            1             0  \n",
       "1                                    0            1             0  \n",
       "2                                    0            1             0  \n",
       "3                                    0            1             0  \n",
       "4                                    0            1             0  \n",
       "\n",
       "[5 rows x 54 columns]"
      ]
     },
     "execution_count": 90,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "imputed_DF_dummy.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 91,
   "metadata": {},
   "outputs": [],
   "source": [
    "imputed_DF_dummy.drop(cat, inplace=True, axis=1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 92,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>host_response_rate</th>\n",
       "      <th>host_acceptance_rate</th>\n",
       "      <th>host_listings_count</th>\n",
       "      <th>accommodates</th>\n",
       "      <th>bathrooms</th>\n",
       "      <th>bedrooms</th>\n",
       "      <th>beds</th>\n",
       "      <th>price</th>\n",
       "      <th>guests_included</th>\n",
       "      <th>extra_people</th>\n",
       "      <th>...</th>\n",
       "      <th>bed_type_Couch</th>\n",
       "      <th>bed_type_Futon</th>\n",
       "      <th>bed_type_Pull-out Sofa</th>\n",
       "      <th>bed_type_Real Bed</th>\n",
       "      <th>cancellation_policy_flexible</th>\n",
       "      <th>cancellation_policy_moderate</th>\n",
       "      <th>cancellation_policy_strict</th>\n",
       "      <th>cancellation_policy_super_strict_30</th>\n",
       "      <th>city_Boston</th>\n",
       "      <th>city_Seattle</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>100</td>\n",
       "      <td>100</td>\n",
       "      <td>1</td>\n",
       "      <td>4</td>\n",
       "      <td>1.5</td>\n",
       "      <td>2</td>\n",
       "      <td>3</td>\n",
       "      <td>5.521461</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>100</td>\n",
       "      <td>100</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>4.174387</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>100</td>\n",
       "      <td>88</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>4.174387</td>\n",
       "      <td>1</td>\n",
       "      <td>20</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>100</td>\n",
       "      <td>50</td>\n",
       "      <td>1</td>\n",
       "      <td>4</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>4.317488</td>\n",
       "      <td>2</td>\n",
       "      <td>25</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>100</td>\n",
       "      <td>100</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>1.5</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>4.369448</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5 rows × 48 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "  host_response_rate host_acceptance_rate host_listings_count accommodates  \\\n",
       "0                100                  100                   1            4   \n",
       "1                100                  100                   1            2   \n",
       "2                100                   88                   1            2   \n",
       "3                100                   50                   1            4   \n",
       "4                100                  100                   1            2   \n",
       "\n",
       "  bathrooms bedrooms beds     price guests_included extra_people  \\\n",
       "0       1.5        2    3  5.521461               1            0   \n",
       "1         1        1    1  4.174387               0            0   \n",
       "2         1        1    1  4.174387               1           20   \n",
       "3         1        1    2  4.317488               2           25   \n",
       "4       1.5        1    2  4.369448               1            0   \n",
       "\n",
       "       ...      bed_type_Couch  bed_type_Futon  bed_type_Pull-out Sofa  \\\n",
       "0      ...                   0               0                       0   \n",
       "1      ...                   0               0                       0   \n",
       "2      ...                   0               0                       0   \n",
       "3      ...                   0               0                       0   \n",
       "4      ...                   0               0                       0   \n",
       "\n",
       "   bed_type_Real Bed  cancellation_policy_flexible  \\\n",
       "0                  1                             0   \n",
       "1                  1                             0   \n",
       "2                  1                             0   \n",
       "3                  1                             0   \n",
       "4                  1                             1   \n",
       "\n",
       "   cancellation_policy_moderate  cancellation_policy_strict  \\\n",
       "0                             1                           0   \n",
       "1                             1                           0   \n",
       "2                             1                           0   \n",
       "3                             1                           0   \n",
       "4                             0                           0   \n",
       "\n",
       "   cancellation_policy_super_strict_30  city_Boston  city_Seattle  \n",
       "0                                    0            1             0  \n",
       "1                                    0            1             0  \n",
       "2                                    0            1             0  \n",
       "3                                    0            1             0  \n",
       "4                                    0            1             0  \n",
       "\n",
       "[5 rows x 48 columns]"
      ]
     },
     "execution_count": 92,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "final_DF = imputed_DF_dummy\n",
    "final_DF.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 121,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Split data into training and test data, and fit a linear model\n",
    "from sklearn.model_selection import train_test_split\n",
    "y = final_DF.price.values\n",
    "X = final_DF.drop(\"price\", axis=1).values\n",
    "X_train, X_test, y_train, y_test = train_test_split(X, y , test_size=.30, random_state=42)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 122,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "ElasticNetCV(alphas=None, copy_X=True, cv=5, eps=0.001, fit_intercept=True,\n",
       "       l1_ratio=0.5, max_iter=1000, n_alphas=100, n_jobs=None,\n",
       "       normalize=True, positive=False, precompute='auto', random_state=0,\n",
       "       selection='cyclic', tol=0.0001, verbose=0)"
      ]
     },
     "execution_count": 122,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from sklearn.linear_model import ElasticNetCV\n",
    "regr = ElasticNetCV(cv=5, random_state=0, normalize=True)\n",
    "regr.fit(X_train, y_train) "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 123,
   "metadata": {},
   "outputs": [],
   "source": [
    "y_predict = regr.predict(X_test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 124,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.6198818646968127"
      ]
     },
     "execution_count": 124,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from sklearn.metrics import r2_score, mean_squared_error\n",
    "r2_score(y_test, y_predict)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 125,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.15042693928211434"
      ]
     },
     "execution_count": 125,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "mean_squared_error(y_test, y_predict)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 126,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.6203475752368098"
      ]
     },
     "execution_count": 126,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from sklearn.linear_model import LinearRegression\n",
    "linear = LinearRegression()\n",
    "linear.fit(X_train, y_train) \n",
    "y_predict2 = linear.predict(X_test)\n",
    "r2_score(y_test, y_predict2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 114,
   "metadata": {},
   "outputs": [
    {
     "ename": "NameError",
     "evalue": "name 'LogisticRegression' is not defined",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)",
      "\u001b[0;32m<ipython-input-114-dd102bd1eb27>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[1;32m      2\u001b[0m \u001b[0;32mfrom\u001b[0m \u001b[0msklearn\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mmetrics\u001b[0m \u001b[0;32mimport\u001b[0m \u001b[0mmake_scorer\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mr2_score\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mmean_squared_error\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      3\u001b[0m \u001b[0;31m# TODO: Initialize the classifier\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 4\u001b[0;31m \u001b[0mlasso\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mLogisticRegression\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      5\u001b[0m \u001b[0mC_list\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m[\u001b[0m\u001b[0;36m0.01\u001b[0m \u001b[0;34m*\u001b[0m \u001b[0;36m2\u001b[0m\u001b[0;34m**\u001b[0m\u001b[0mi\u001b[0m \u001b[0;32mfor\u001b[0m \u001b[0mi\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mrange\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;36m11\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      6\u001b[0m \u001b[0;31m# TODO: Create the parameters list you wish to tune, using a dictionary if needed.\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;31mNameError\u001b[0m: name 'LogisticRegression' is not defined"
     ]
    }
   ],
   "source": [
    "from sklearn.model_selection import GridSearchCV\n",
    "from sklearn.metrics import make_scorer, r2_score, mean_squared_error\n",
    "# TODO: Initialize the classifier\n",
    "lasso = LogisticRegression()\n",
    "C_list = [0.01 * 2**i for i in range(11)]\n",
    "# TODO: Create the parameters list you wish to tune, using a dictionary if needed.\n",
    "# HINT: parameters = {'parameter_1': [value1, value2], 'parameter_2': [value1, value2]}\n",
    "parameters = {'penalty':['l1', 'l2'], 'C': C_list}\n",
    "\n",
    "\n",
    "# TODO: Make an fbeta_score scoring object using make_scorer()\n",
    "scorer = make_scorer(fbeta_score, beta = 0.5)\n",
    "\n",
    "# TODO: Perform grid search on the classifier using 'scorer' as the scoring method using GridSearchCV()\n",
    "grid_obj = GridSearchCV(clf, parameters, scoring = scorer)\n",
    "\n",
    "# TODO: Fit the grid search object to the training data and find the optimal parameters using fit()\n",
    "grid_fit = grid_obj.fit(X_train, y_train)\n",
    "\n",
    "# Get the estimator\n",
    "best_clf = grid_obj.best_estimator_\n",
    "\n",
    "# Make predictions using the unoptimized and model\n",
    "predictions = (clf.fit(X_train, y_train)).predict(X_test)\n",
    "best_predictions = best_clf.predict(X_test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 135,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0.38472034943040895\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "-0.0006413806508593911"
      ]
     },
     "execution_count": 135,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from sklearn.model_selection import GridSearchCV\n",
    "from sklearn.metrics import make_scorer, r2_score, mean_squared_error\n",
    "from sklearn.linear_model import Lasso\n",
    "\n",
    "lasso = Lasso(normalize=True)\n",
    "alpha_list = [0.01 * 2**i for i in range(12)]\n",
    "lasso_parameters = {\"alpha\": alpha_list}\n",
    "scorer = make_scorer(mean_squared_error)\n",
    "lasso_grid = GridSearchCV(lasso, lasso_parameters, scoring=scorer, cv = 5)\n",
    "lasso_grid.fit(X_train, y_train)\n",
    "lasso_predict = lasso_grid.predict(X_test)\n",
    "r2_score(y_test, lasso_predict)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 137,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([4.80112119, 4.80112119, 4.80112119, ..., 4.80112119, 4.80112119,\n",
       "       4.80112119])"
      ]
     },
     "execution_count": 137,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "lasso_predict"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 138,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[90.0, 100.0, 37.0, ..., 0, 0, 1],\n",
       "       [100.0, 99.0, 15.0, ..., 0, 1, 0],\n",
       "       [80.0, 100.0, 34.0, ..., 0, 0, 1],\n",
       "       ...,\n",
       "       [50.0, 100.0, 1.0, ..., 0, 1, 0],\n",
       "       [89.0, 45.0, 558.0, ..., 1, 1, 0],\n",
       "       [100.0, 100.0, 1.0, ..., 0, 0, 1]], dtype=object)"
      ]
     },
     "execution_count": 138,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "X_test"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 131,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.06516457099930195"
      ]
     },
     "execution_count": 131,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "lasso = Lasso()\n",
    "lasso.fit(X_train, y_train)\n",
    "lasso_predict = lasso.predict(X_train)\n",
    "r2_score(y_train, lasso_predict)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 103,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "781     3.912023\n",
       "3197    5.220356\n",
       "782     4.653960\n",
       "1429    4.382027\n",
       "554     5.187386\n",
       "2655    4.442651\n",
       "1108    4.442651\n",
       "185     5.521461\n",
       "2460    4.605170\n",
       "263     4.007333\n",
       "2316    4.584967\n",
       "3176    4.094345\n",
       "2191    4.499810\n",
       "3071    4.976734\n",
       "3485    4.499810\n",
       "1762    3.737670\n",
       "230     4.828314\n",
       "1737    5.010635\n",
       "3694    4.574711\n",
       "1979    4.905275\n",
       "1215    3.912023\n",
       "1812    5.220356\n",
       "251     5.192957\n",
       "62      4.382027\n",
       "1104    4.828314\n",
       "1544    4.762174\n",
       "2260    5.703782\n",
       "2526    4.941642\n",
       "503     4.007333\n",
       "2716    3.688879\n",
       "          ...   \n",
       "183     4.248495\n",
       "2159    3.713572\n",
       "1021    4.234107\n",
       "3082    5.652489\n",
       "471     2.995732\n",
       "967     4.919981\n",
       "209     5.181784\n",
       "1961    5.187386\n",
       "896     4.499810\n",
       "2018    4.553877\n",
       "2652    5.043425\n",
       "933     5.783825\n",
       "1773    5.347108\n",
       "751     3.970292\n",
       "1209    5.857933\n",
       "3731    4.488636\n",
       "636     4.382027\n",
       "3408    3.912023\n",
       "3181    4.828314\n",
       "3206    5.393628\n",
       "2977    4.094345\n",
       "3779    4.219508\n",
       "1962    4.382027\n",
       "292     4.094345\n",
       "2572    4.442651\n",
       "1783    4.941642\n",
       "2825    4.248495\n",
       "272     5.075174\n",
       "2042    5.594711\n",
       "148     4.007333\n",
       "Name: price, Length: 2221, dtype: float64"
      ]
     },
     "execution_count": 103,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "y_test"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.1"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
